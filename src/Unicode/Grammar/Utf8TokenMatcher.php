<?php

/**
 * Unicode UTF-8 token matcher.
 *
 * Auto-generated file, please don't edit manually.
 * Generated by UniLex.
 */

declare(strict_types=1);

namespace Remorhaz\UniLex\Unicode\Grammar;

use Remorhaz\UniLex\IO\CharBufferInterface;
use Remorhaz\UniLex\Lexer\TokenFactoryInterface;
use Remorhaz\UniLex\Lexer\TokenMatcherTemplate;

class Utf8TokenMatcher extends TokenMatcherTemplate
{

    public function match(CharBufferInterface $buffer, TokenFactoryInterface $tokenFactory): bool
    {
        $context = $this->createContext($buffer, $tokenFactory);
        goto state1;

        state1:
        if ($context->getBuffer()->isEnd()) {
            goto error;
        }
        $char = $context->getBuffer()->getSymbol();
        if (0x00 <= $char && $char <= 0x7F) {
            $context->getBuffer()->nextSymbol();
            $context->visitTransition('1-2:0');
            goto state2;
        }
        if (0xC0 <= $char && $char <= 0xDF) {
            $context->getBuffer()->nextSymbol();
            $context->visitTransition('1-3:1');
            goto state3;
        }
        if (0xE0 <= $char && $char <= 0xEF) {
            $context->getBuffer()->nextSymbol();
            $context->visitTransition('1-4:3');
            goto state4;
        }
        if (0xF0 <= $char && $char <= 0xF7) {
            $context->getBuffer()->nextSymbol();
            $context->visitTransition('1-5:4');
            goto state5;
        }
        if (0xF8 <= $char && $char <= 0xFB) {
            $context->getBuffer()->nextSymbol();
            $context->visitTransition('1-6:5');
            goto state6;
        }
        if (0xFC == $char || 0xFD == $char) {
            $context->getBuffer()->nextSymbol();
            goto state7;
        }
        goto error;

        state2:
        if ($context->isVisitedTransition('7-6:2')) {
            // [\xFC-\xFD][\x80-\xBF]{5}
            $charList = array_slice($context->getSymbolList(), -6);
            $symbol = ($charList[0] & 0x01) << 30;
            $symbol |= ($charList[1] & 0x03) << 24;
            $symbol |= ($charList[2] & 0x3F) << 18;
            $symbol |= ($charList[3] & 0x3F) << 12;
            $symbol |= ($charList[4] & 0x3F) << 6;
            $symbol |= ($charList[5] & 0x3F);
            $context
                ->setNewToken(TokenType::SYMBOL)
                ->setTokenAttribute(TokenAttribute::UNICODE_CHAR, $symbol);

            return true;
        }
        if ($context->isVisitedTransition('1-6:5')) {
            // [\xF8-\xFB][\x80-\xBF]{4}
            $charList = array_slice($context->getSymbolList(), -5);
            $symbol = ($charList[0] & 0x03) << 24;
            $symbol |= ($charList[1] & 0x3F) << 18;
            $symbol |= ($charList[2] & 0x3F) << 12;
            $symbol |= ($charList[3] & 0x3F) << 6;
            $symbol |= ($charList[4] & 0x3F);
            $context
                ->setNewToken(TokenType::SYMBOL)
                ->setTokenAttribute(TokenAttribute::UNICODE_CHAR, $symbol);

            return true;
        }
        if ($context->isVisitedTransition('1-5:4')) {
            // [\xF0-\xF7][\x80-\xBF]{3}
            $charList = array_slice($context->getSymbolList(), -4);
            $symbol = ($charList[0] & 0x07) << 18;
            $symbol |= ($charList[1] & 0x3F) << 12;
            $symbol |= ($charList[2] & 0x3F) << 6;
            $symbol |= ($charList[3] & 0x3F);
            $context
                ->setNewToken(TokenType::SYMBOL)
                ->setTokenAttribute(TokenAttribute::UNICODE_CHAR, $symbol);

            return true;
        }
        if ($context->isVisitedTransition('1-4:3')) {
            // [\xE0-\xEF][\x80-\xBF]{2}
            $charList = array_slice($context->getSymbolList(), -3);
            $symbol = ($charList[0] & 0x0F) << 12;
            $symbol |= ($charList[1] & 0x3F) << 6;
            $symbol |= ($charList[2] & 0x3F);
            $context
                ->setNewToken(TokenType::SYMBOL)
                ->setTokenAttribute(TokenAttribute::UNICODE_CHAR, $symbol);

            return true;
        }
        if ($context->isVisitedTransition('1-3:1')) {
            // [\xC0-\xDF][\x80-\xBF]
            $charList = array_slice($context->getSymbolList(), -2);
            $symbol = ($charList[0] & 0x1F) << 6;
            $symbol |= ($charList[1] & 0x3F);
            $context
                ->setNewToken(TokenType::SYMBOL)
                ->setTokenAttribute(TokenAttribute::UNICODE_CHAR, $symbol);

            return true;
        }
        if ($context->isVisitedTransition('1-2:0')) {
            // [\x00-\x7F]
            $context
                ->setNewToken(TokenType::SYMBOL)
                ->setTokenAttribute(TokenAttribute::UNICODE_CHAR, $char);

            return true;
        }
        goto error;

        state3:
        if ($context->getBuffer()->isEnd()) {
            goto error;
        }
        $char = $context->getBuffer()->getSymbol();
        if (0x80 <= $char && $char <= 0xBF) {
            $context->getBuffer()->nextSymbol();
            goto state2;
        }
        goto error;

        state4:
        if ($context->getBuffer()->isEnd()) {
            goto error;
        }
        $char = $context->getBuffer()->getSymbol();
        if (0x80 <= $char && $char <= 0xBF) {
            $context->getBuffer()->nextSymbol();
            goto state3;
        }
        goto error;

        state5:
        if ($context->getBuffer()->isEnd()) {
            goto error;
        }
        $char = $context->getBuffer()->getSymbol();
        if (0x80 <= $char && $char <= 0xBF) {
            $context->getBuffer()->nextSymbol();
            goto state4;
        }
        goto error;

        state6:
        if ($context->getBuffer()->isEnd()) {
            goto error;
        }
        $char = $context->getBuffer()->getSymbol();
        if (0x80 <= $char && $char <= 0xBF) {
            $context->getBuffer()->nextSymbol();
            goto state5;
        }
        goto error;

        state7:
        if ($context->getBuffer()->isEnd()) {
            goto error;
        }
        $char = $context->getBuffer()->getSymbol();
        if (0x80 <= $char && $char <= 0xBF) {
            $context->getBuffer()->nextSymbol();
            $context->visitTransition('7-6:2');
            goto state6;
        }
        goto error;

        error:
        if ($context->getBuffer()->isEnd()) {
            return false;
        }
        $context->getBuffer()->nextSymbol();
        $context->setNewToken(TokenType::INVALID_BYTES);
        return true;
    }
}
