<?php

/**
 * Auto-generated file, please don't edit manually.
 * Generated by UniLex.
 */

declare(strict_types=1);

namespace Remorhaz\UniLex\Unicode\Grammar;

use Remorhaz\UniLex\IO\CharBufferInterface;
use Remorhaz\UniLex\Lexer\TokenFactoryInterface;
use Remorhaz\UniLex\Lexer\TokenMatcherTemplate;

class Utf8TokenMatcher extends TokenMatcherTemplate
{

    public function match(CharBufferInterface $buffer, TokenFactoryInterface $tokenFactory): bool
    {
        $context = $this->createContext($buffer, $tokenFactory);
        $context->setRegExps(
            'default',
            '[\\x00-\\x7F]',
            '[\\xC0-\\xDF][\\x80-\\xBF]',
            '[\\xE0-\\xEF][\\x80-\\xBF]{2}',
            '[\\xF0-\\xF7][\\x80-\\xBF]{3}',
            '[\\xF8-\\xFB][\\x80-\\xBF]{4}',
            '[\\xFC-\\xFD][\\x80-\\xBF]{5}'
        );
        goto state1;

        state1:
        if ($context->getBuffer()->isEnd()) {
            goto error;
        }
        $char = $context->getBuffer()->getSymbol();
        if (0x00 <= $char && $char <= 0x7F) {
            $context->getBuffer()->nextSymbol();
            $context->allowRegExps('[\\x00-\\x7F]');
            goto state2;
        }
        if (0xC0 <= $char && $char <= 0xDF) {
            $context->getBuffer()->nextSymbol();
            $context->allowRegExps('[\\xC0-\\xDF][\\x80-\\xBF]');
            goto state3;
        }
        if (0xE0 <= $char && $char <= 0xEF) {
            $context->getBuffer()->nextSymbol();
            $context->allowRegExps('[\\xE0-\\xEF][\\x80-\\xBF]{2}');
            goto state4;
        }
        if (0xF0 <= $char && $char <= 0xF7) {
            $context->getBuffer()->nextSymbol();
            $context->allowRegExps('[\\xF0-\\xF7][\\x80-\\xBF]{3}');
            goto state5;
        }
        if (0xF8 <= $char && $char <= 0xFB) {
            $context->getBuffer()->nextSymbol();
            $context->allowRegExps('[\\xF8-\\xFB][\\x80-\\xBF]{4}');
            goto state6;
        }
        if (0xFC == $char || 0xFD == $char) {
            $context->getBuffer()->nextSymbol();
            $context->allowRegExps('[\\xFC-\\xFD][\\x80-\\xBF]{5}');
            goto state7;
        }
        goto error;

        state2:
        switch ($context->getRegExp()) {
            case '[\\x00-\\x7F]':
                $context
                    ->setNewToken(TokenType::SYMBOL)
                    ->setTokenAttribute(TokenAttribute::UNICODE_CHAR, $char);

                return true;

            case '[\\xC0-\\xDF][\\x80-\\xBF]':
                $charList = array_slice($context->getSymbolList(), -2);
                $symbol = ($charList[0] & 0x1F) << 6;
                $symbol |= ($charList[1] & 0x3F);
                $context
                    ->setNewToken(TokenType::SYMBOL)
                    ->setTokenAttribute(TokenAttribute::UNICODE_CHAR, $symbol);

                return true;

            case '[\\xE0-\\xEF][\\x80-\\xBF]{2}':
                $charList = array_slice($context->getSymbolList(), -3);
                $symbol = ($charList[0] & 0x0F) << 12;
                $symbol |= ($charList[1] & 0x3F) << 6;
                $symbol |= ($charList[2] & 0x3F);
                $context
                    ->setNewToken(TokenType::SYMBOL)
                    ->setTokenAttribute(TokenAttribute::UNICODE_CHAR, $symbol);

                return true;

            case '[\\xF0-\\xF7][\\x80-\\xBF]{3}':
                $charList = array_slice($context->getSymbolList(), -4);
                $symbol = ($charList[0] & 0x07) << 18;
                $symbol |= ($charList[1] & 0x3F) << 12;
                $symbol |= ($charList[2] & 0x3F) << 6;
                $symbol |= ($charList[3] & 0x3F);
                $context
                    ->setNewToken(TokenType::SYMBOL)
                    ->setTokenAttribute(TokenAttribute::UNICODE_CHAR, $symbol);

                return true;

            case '[\\xF8-\\xFB][\\x80-\\xBF]{4}':
                $charList = array_slice($context->getSymbolList(), -5);
                $symbol = ($charList[0] & 0x03) << 24;
                $symbol |= ($charList[1] & 0x3F) << 18;
                $symbol |= ($charList[2] & 0x3F) << 12;
                $symbol |= ($charList[3] & 0x3F) << 6;
                $symbol |= ($charList[4] & 0x3F);
                $context
                    ->setNewToken(TokenType::SYMBOL)
                    ->setTokenAttribute(TokenAttribute::UNICODE_CHAR, $symbol);

                return true;

            case '[\\xFC-\\xFD][\\x80-\\xBF]{5}':
                $charList = array_slice($context->getSymbolList(), -6);
                $symbol = ($charList[0] & 0x01) << 30;
                $symbol |= ($charList[1] & 0x03) << 24;
                $symbol |= ($charList[2] & 0x3F) << 18;
                $symbol |= ($charList[3] & 0x3F) << 12;
                $symbol |= ($charList[4] & 0x3F) << 6;
                $symbol |= ($charList[5] & 0x3F);
                $context
                    ->setNewToken(TokenType::SYMBOL)
                    ->setTokenAttribute(TokenAttribute::UNICODE_CHAR, $symbol);

                return true;

            default:
                goto error;
        }

        state3:
        if ($context->getBuffer()->isEnd()) {
            goto error;
        }
        $char = $context->getBuffer()->getSymbol();
        if (0x80 <= $char && $char <= 0xBF) {
            $context->getBuffer()->nextSymbol();
            $context->allowRegExps(
                '[\\xC0-\\xDF][\\x80-\\xBF]',
                '[\\xE0-\\xEF][\\x80-\\xBF]{2}',
                '[\\xF0-\\xF7][\\x80-\\xBF]{3}',
                '[\\xF8-\\xFB][\\x80-\\xBF]{4}',
                '[\\xFC-\\xFD][\\x80-\\xBF]{5}'
            );
            goto state2;
        }
        goto error;

        state4:
        if ($context->getBuffer()->isEnd()) {
            goto error;
        }
        $char = $context->getBuffer()->getSymbol();
        if (0x80 <= $char && $char <= 0xBF) {
            $context->getBuffer()->nextSymbol();
            $context->allowRegExps(
                '[\\xE0-\\xEF][\\x80-\\xBF]{2}',
                '[\\xF0-\\xF7][\\x80-\\xBF]{3}',
                '[\\xF8-\\xFB][\\x80-\\xBF]{4}',
                '[\\xFC-\\xFD][\\x80-\\xBF]{5}'
            );
            goto state3;
        }
        goto error;

        state5:
        if ($context->getBuffer()->isEnd()) {
            goto error;
        }
        $char = $context->getBuffer()->getSymbol();
        if (0x80 <= $char && $char <= 0xBF) {
            $context->getBuffer()->nextSymbol();
            $context->allowRegExps(
                '[\\xF0-\\xF7][\\x80-\\xBF]{3}',
                '[\\xF8-\\xFB][\\x80-\\xBF]{4}',
                '[\\xFC-\\xFD][\\x80-\\xBF]{5}'
            );
            goto state4;
        }
        goto error;

        state6:
        if ($context->getBuffer()->isEnd()) {
            goto error;
        }
        $char = $context->getBuffer()->getSymbol();
        if (0x80 <= $char && $char <= 0xBF) {
            $context->getBuffer()->nextSymbol();
            $context->allowRegExps(
                '[\\xF8-\\xFB][\\x80-\\xBF]{4}',
                '[\\xFC-\\xFD][\\x80-\\xBF]{5}'
            );
            goto state5;
        }
        goto error;

        state7:
        if ($context->getBuffer()->isEnd()) {
            goto error;
        }
        $char = $context->getBuffer()->getSymbol();
        if (0x80 <= $char && $char <= 0xBF) {
            $context->getBuffer()->nextSymbol();
            $context->allowRegExps('[\\xFC-\\xFD][\\x80-\\xBF]{5}');
            goto state6;
        }
        goto error;

        error:
        if ($context->getBuffer()->isEnd()) {
            return false;
        }
        $context->getBuffer()->nextSymbol();
        $context->setNewToken(TokenType::INVALID_BYTES);
        return true;
    }
}
